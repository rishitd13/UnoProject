#BlueJ class context
comment0.target=Game
comment0.text=\n\ <p>A\ Game\ object\ represents\ a\ single\ game\ of\ Uno\ in\ an\ overall\ match\ (of\n\ possibly\ many\ games).\ Games\ are\ instantiated\ by\ providing\ them\ with\ a\n\ roster\ of\ players,\ including\ a\ Scoreboard\ object\ through\ which\ scores\n\ can\ be\ accumulated.\ The\ play()\ method\ then\ kicks\ off\ the\ game,\ which\n\ will\ proceed\ from\ start\ to\ finish\ and\ update\ the\ Scoreboard.\ Various\n\ aspects\ of\ the\ game's\ state\ (<i>e.g.</i>,\ whether\ the\ direction\ of\ play\n\ is\ currently\ clockwise\ or\ counterclockwise,\ whose\ player's\ turn\ is\ next)\n\ can\ be\ accessed\ and\ controlled\ through\ methods\ on\ this\ class.</p>\n\ <p>A\ GameState\ object\ can\ be\ obtained\ through\ the\ getGameState()\ method,\n\ which\ allows\ UnoPlayers\ to\ selectively\ and\ legally\ examine\ certain\n\ aspects\ of\ the\ game's\ state.</p>\n\ @since\ 1.0\n
comment1.params=scoreboard\ playerClassList
comment1.target=Game(Scoreboard,\ java.util.ArrayList)
comment1.text=\n\ Main\ constructor\ to\ instantiate\ a\ Game\ of\ Uno.\ Provided\ must\ be\ two\n\ objects\ indicating\ the\ player\ roster\:\ a\ Scoreboard,\ and\ a\ class\n\ list.\ This\ constructor\ will\ deal\ hands\ to\ all\ players,\ select\ a\n\ non-action\ up\ card,\ and\ reset\ all\ game\ settings\ so\ that\ play()\ can\n\ be\ safely\ called.\n\ @param\ scoreboard\ A\ fully-populated\ Scoreboard\ object\ that\ contains\n\ the\ names\ of\ the\ contestants,\ in\ order.\n\ @param\ playerClassList[]\ An\ array\ of\ Strings,\ each\ of\ which\ is\ a\n\ fully-qualified\ package/class\ name\ of\ a\ class\ that\ implements\ the\n\ UnoPlayer\ interface.\n
comment10.params=
comment10.target=Card\ getUpCard()
comment10.text=\n\ Return\ the\ Card\ that\ is\ currently\ the\ "up\ card"\ in\ the\ game.\n
comment2.params=
comment2.target=void\ printState()
comment3.params=
comment3.target=int\ getNextPlayer()
comment3.text=\n\ Return\ the\ number\ of\ the\ <i>next</i>\ player\ to\ play,\ provided\ the\n\ current\ player\ doesn't\ jack\ that\ up\ by\ playing\ an\ action\ card.\n\ @return\ An\ integer\ from\ 0\ to\ scoreboard.getNumPlayers()-1.\n
comment4.params=
comment4.target=void\ advanceToNextPlayer()
comment4.text=\n\ Go\ ahead\ and\ advance\ to\ the\ next\ player.\n
comment5.params=
comment5.target=void\ reverseDirection()
comment5.text=\n\ Change\ the\ direction\ of\ the\ game\ from\ clockwise\ to\ counterclockwise\n\ (or\ vice\ versa.)\n
comment6.params=
comment6.target=void\ play()
comment6.text=\n\ Play\ an\ entire\ Game\ of\ Uno\ from\ start\ to\ finish.\ Hands\ should\ have\n\ already\ been\ dealt\ before\ this\ method\ is\ called,\ and\ a\ valid\ up\ card\n\ turned\ up.\ When\ the\ method\ is\ completed,\ the\ Game's\ scoreboard\ object\n\ will\ have\ been\ updated\ with\ new\ scoring\ favoring\ the\ winner.\n
comment7.params=s
comment7.target=void\ print(java.lang.String)
comment8.params=s
comment8.target=void\ println(java.lang.String)
comment9.params=
comment9.target=GameState\ getGameState()
comment9.text=\n\ Return\ the\ GameState\ object,\ through\ which\ the\ state\ of\ the\ game\ can\n\ be\ accessed\ and\ safely\ manipulated.\n
numComments=11
